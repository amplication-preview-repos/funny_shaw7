/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VoltageReading } from "./VoltageReading";
import { VoltageReadingCountArgs } from "./VoltageReadingCountArgs";
import { VoltageReadingFindManyArgs } from "./VoltageReadingFindManyArgs";
import { VoltageReadingFindUniqueArgs } from "./VoltageReadingFindUniqueArgs";
import { CreateVoltageReadingArgs } from "./CreateVoltageReadingArgs";
import { UpdateVoltageReadingArgs } from "./UpdateVoltageReadingArgs";
import { DeleteVoltageReadingArgs } from "./DeleteVoltageReadingArgs";
import { VoltageReadingDto } from "../VoltageReadingDto";
import { VoltageReadingService } from "../voltageReading.service";
@graphql.Resolver(() => VoltageReading)
export class VoltageReadingResolverBase {
  constructor(protected readonly service: VoltageReadingService) {}

  async _voltageReadingsMeta(
    @graphql.Args() args: VoltageReadingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VoltageReading])
  async voltageReadings(
    @graphql.Args() args: VoltageReadingFindManyArgs
  ): Promise<VoltageReading[]> {
    return this.service.voltageReadings(args);
  }

  @graphql.Query(() => VoltageReading, { nullable: true })
  async voltageReading(
    @graphql.Args() args: VoltageReadingFindUniqueArgs
  ): Promise<VoltageReading | null> {
    const result = await this.service.voltageReading(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VoltageReading)
  async createVoltageReading(
    @graphql.Args() args: CreateVoltageReadingArgs
  ): Promise<VoltageReading> {
    return await this.service.createVoltageReading({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => VoltageReading)
  async updateVoltageReading(
    @graphql.Args() args: UpdateVoltageReadingArgs
  ): Promise<VoltageReading | null> {
    try {
      return await this.service.updateVoltageReading({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VoltageReading)
  async deleteVoltageReading(
    @graphql.Args() args: DeleteVoltageReadingArgs
  ): Promise<VoltageReading | null> {
    try {
      return await this.service.deleteVoltageReading(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VoltageReadingDto)
  async AddVoltageReading(
    @graphql.Args()
    args: VoltageReadingDto
  ): Promise<VoltageReadingDto> {
    return this.service.AddVoltageReading(args);
  }

  @graphql.Query(() => [VoltageReadingDto])
  async GetVoltageReadings(
    @graphql.Args()
    args: string
  ): Promise<VoltageReadingDto[]> {
    return this.service.GetVoltageReadings(args);
  }
}
