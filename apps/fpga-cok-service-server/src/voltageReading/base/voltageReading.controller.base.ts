/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VoltageReadingService } from "../voltageReading.service";
import { VoltageReadingCreateInput } from "./VoltageReadingCreateInput";
import { VoltageReading } from "./VoltageReading";
import { VoltageReadingFindManyArgs } from "./VoltageReadingFindManyArgs";
import { VoltageReadingWhereUniqueInput } from "./VoltageReadingWhereUniqueInput";
import { VoltageReadingUpdateInput } from "./VoltageReadingUpdateInput";
import { VoltageReadingDto } from "../VoltageReadingDto";

export class VoltageReadingControllerBase {
  constructor(protected readonly service: VoltageReadingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoltageReading })
  async createVoltageReading(
    @common.Body() data: VoltageReadingCreateInput
  ): Promise<VoltageReading> {
    return await this.service.createVoltageReading({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VoltageReading] })
  @ApiNestedQuery(VoltageReadingFindManyArgs)
  async voltageReadings(
    @common.Req() request: Request
  ): Promise<VoltageReading[]> {
    const args = plainToClass(VoltageReadingFindManyArgs, request.query);
    return this.service.voltageReadings({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoltageReading })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async voltageReading(
    @common.Param() params: VoltageReadingWhereUniqueInput
  ): Promise<VoltageReading | null> {
    const result = await this.service.voltageReading({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        timestamp: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoltageReading })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVoltageReading(
    @common.Param() params: VoltageReadingWhereUniqueInput,
    @common.Body() data: VoltageReadingUpdateInput
  ): Promise<VoltageReading | null> {
    try {
      return await this.service.updateVoltageReading({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoltageReading })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVoltageReading(
    @common.Param() params: VoltageReadingWhereUniqueInput
  ): Promise<VoltageReading | null> {
    try {
      return await this.service.deleteVoltageReading({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          timestamp: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/addVoltageReading")
  @swagger.ApiOkResponse({
    type: VoltageReadingDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async AddVoltageReading(
    @common.Body()
    body: string
  ): Promise<VoltageReadingDto> {
    return this.service.AddVoltageReading(body);
  }

  @common.Get("/getVoltageReadings")
  @swagger.ApiOkResponse({
    type: VoltageReadingDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetVoltageReadings(
    @common.Body()
    body: string
  ): Promise<VoltageReadingDto[]> {
    return this.service.GetVoltageReadings(body);
  }
}
