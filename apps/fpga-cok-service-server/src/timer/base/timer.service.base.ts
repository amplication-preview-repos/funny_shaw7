/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Timer as PrismaTimer,
  Command as PrismaCommand,
} from "@prisma/client";

export class TimerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TimerCountArgs, "select">): Promise<number> {
    return this.prisma.timer.count(args);
  }

  async timers(args: Prisma.TimerFindManyArgs): Promise<PrismaTimer[]> {
    return this.prisma.timer.findMany(args);
  }
  async timer(args: Prisma.TimerFindUniqueArgs): Promise<PrismaTimer | null> {
    return this.prisma.timer.findUnique(args);
  }
  async createTimer(args: Prisma.TimerCreateArgs): Promise<PrismaTimer> {
    return this.prisma.timer.create(args);
  }
  async updateTimer(args: Prisma.TimerUpdateArgs): Promise<PrismaTimer> {
    return this.prisma.timer.update(args);
  }
  async deleteTimer(args: Prisma.TimerDeleteArgs): Promise<PrismaTimer> {
    return this.prisma.timer.delete(args);
  }

  async getCommand(parentId: string): Promise<PrismaCommand | null> {
    return this.prisma.timer
      .findUnique({
        where: { id: parentId },
      })
      .command();
  }
}
