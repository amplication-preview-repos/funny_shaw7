/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Timer } from "./Timer";
import { TimerCountArgs } from "./TimerCountArgs";
import { TimerFindManyArgs } from "./TimerFindManyArgs";
import { TimerFindUniqueArgs } from "./TimerFindUniqueArgs";
import { CreateTimerArgs } from "./CreateTimerArgs";
import { UpdateTimerArgs } from "./UpdateTimerArgs";
import { DeleteTimerArgs } from "./DeleteTimerArgs";
import { Command } from "../../command/base/Command";
import { TimerService } from "../timer.service";
@graphql.Resolver(() => Timer)
export class TimerResolverBase {
  constructor(protected readonly service: TimerService) {}

  async _timersMeta(
    @graphql.Args() args: TimerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Timer])
  async timers(@graphql.Args() args: TimerFindManyArgs): Promise<Timer[]> {
    return this.service.timers(args);
  }

  @graphql.Query(() => Timer, { nullable: true })
  async timer(
    @graphql.Args() args: TimerFindUniqueArgs
  ): Promise<Timer | null> {
    const result = await this.service.timer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Timer)
  async createTimer(@graphql.Args() args: CreateTimerArgs): Promise<Timer> {
    return await this.service.createTimer({
      ...args,
      data: {
        ...args.data,

        command: args.data.command
          ? {
              connect: args.data.command,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Timer)
  async updateTimer(
    @graphql.Args() args: UpdateTimerArgs
  ): Promise<Timer | null> {
    try {
      return await this.service.updateTimer({
        ...args,
        data: {
          ...args.data,

          command: args.data.command
            ? {
                connect: args.data.command,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Timer)
  async deleteTimer(
    @graphql.Args() args: DeleteTimerArgs
  ): Promise<Timer | null> {
    try {
      return await this.service.deleteTimer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Command, {
    nullable: true,
    name: "command",
  })
  async getCommand(@graphql.Parent() parent: Timer): Promise<Command | null> {
    const result = await this.service.getCommand(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
